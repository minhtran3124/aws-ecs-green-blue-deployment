AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Default: 'vpc-0c4b7c7150d83ca52'

  # PublicSubnet1ID:
  #   Type: AWS::EC2::Subnet::Id
  #   Default: 'subnet-0955e7b80bf13ec97'

  # PublicSubnet2ID:
  #   Type: AWS::EC2::Subnet::Id
  #   Default: 'subnet-0ba31a22c75ea4223'

  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-04f437bf8e9b96f07'

  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-07a7bf1945a27f0b6'

  PublicLoadBalancer:
    Type: String
    Default: 'arn:aws:elasticloadbalancing:ap-southeast-1:962372302662:loadbalancer/app/public-lb/4fef7fea51e0c8c8'

  FargateContainerSecurityGroup:
    Type: String
    Default: 'sg-04d92c742bb497030'

  # DummyTargetGroupPublic:
  #   Type: String
  #   Default: 'arn:aws:elasticloadbalancing:ap-southeast-1:962372302662:targetgroup/dummy-target-group-public/15166c4aa142aab6'

  # Subnet1:
  #   Type: 'AWS::EC2::Subnet::Id'

  # Subnet2:
  #   Type: 'AWS::EC2::Subnet::Id'

Transform:
  - 'AWS::CodeDeployBlueGreen'

Hooks:
  CodeDeployBlueGreenHook:
    Type: 'AWS::CodeDeploy::BlueGreen'
    Properties:
      TrafficRoutingConfig:
        Type: TimeBasedCanary
        TimeBasedCanary:
          StepPercentage: 15
          BakeTimeMins: 5
      Applications:
        - Target:
            Type: 'AWS::ECS::Service'
            LogicalID: ECSDemoService
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreenTaskDefinition
            TaskSets:
              - BlueTaskSet
              - GreenTaskSet
            TrafficRouting:
              ProdTrafficRoute:
                Type: 'AWS::ElasticLoadBalancingV2::Listener'
                LogicalID: ALBListenerProdTraffic
              TargetGroups:
                - ALBTargetGroupBlue
                - ALBTargetGroupGreen

Resources:
  # ExampleSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Security group for ec2 access
  #     VpcId: !Ref VpcId
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: 8080
  #         ToPort: 8080
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: 22
  #         ToPort: 22
  #         CidrIp: 0.0.0.0/0

  ALBTargetGroupBlue:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref VpcId

  ALBTargetGroupGreen:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref VpcId

  # -----------------------------------------------------
  # Create listener and rule for production traffic
  # -----------------------------------------------------
  ALBListenerProdTraffic:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerProdRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref ALBListenerProdTraffic
      Priority: 1

  # -----------------------------------------------------
  # Create listener and rule for test traffic
  # -----------------------------------------------------
  ALBListenerTestTraffic:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 8080
      Protocol: HTTP

  ALBListenerTestRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref ALBListenerTestTraffic
      Priority: 1

  # -----------------------------------------------------
  # Create role for task execution
  # -----------------------------------------------------
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # -----------------------------------------------------
  # Create ECS cluster and task definition
  # -----------------------------------------------------
  ECSDemoCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: cluster-demo

  ECSDemoService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSDemoCluster
      DesiredCount: 1
      DeploymentController:
        Type: EXTERNAL

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  BlueTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: DemoApp
          Image: 'nginxdemos/hello:latest'
          Essential: true
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      Family: ecs-demo

  BlueTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref ECSDemoCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1ID
            - !Ref PrivateSubnet2ID
      PlatformVersion: 1.3.0
      Scale:
        Unit: PERCENT
        Value: 1
      Service: !Ref ECSDemoService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: DemoApp
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroupBlue

  PrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref ECSDemoCluster
      Service: !Ref ECSDemoService
      TaskSetId: !GetAtt BlueTaskSet.Id



  ############################################################################################
  ############################################################################################
  ############################################################################################
  # ALBListenerProdTraffic:
  #   Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         ForwardConfig:
  #           TargetGroups:
  #             - TargetGroupArn: !Ref ALBTargetGroupBlue
  #               Weight: 1
  #     LoadBalancerArn: !Ref TestALB
  #     Port: 80
  #     Protocol: HTTP

  # ALBListenerProdRule:
  #   Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         ForwardConfig:
  #           TargetGroups:
  #             - TargetGroupArn: !Ref ALBTargetGroupBlue
  #               Weight: 1
  #     Conditions:
  #       - Field: http-header
  #         HttpHeaderConfig:
  #           HttpHeaderName: User-Agent
  #           Values:
  #             - Mozilla
  #     ListenerArn: !Ref ALBListenerProdTraffic
  #     Priority: 1

